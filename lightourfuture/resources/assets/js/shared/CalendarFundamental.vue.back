<template>
<v-container fluid grid-list-xs grid-list-md grid-list-lg>
   <div>
       <Calendar :startDate="today"
          :dateData="dateData"
          :mode="mode"
        >
      
      <div slot="header-left" class="ui-calendar-header__left">
        <!-- Schedule by month -->
        <button @click="mode = 'month'">
          Month
        </button>
        <!-- Schedule by week -->    
        <button
            :class="['ui-calendar-modeBtn', { active: mode === 'week' }]"
            @click="mode = 'week'"
        >
            Week
          </button>
        <v-layout row justify-center>
          <!-- Add Schedule modal(에이전트) v-show="this.$store.getters.classification=='agent'"-->
          <v-dialog v-model="dialog" persistent max-width="500px"  v-show="this.$store.getters.classification=='agent'">
            <v-btn color="primary" dark slot="activator">스케줄추가</v-btn>
              <v-form ref="form" lazy-validation>
              <v-card>
                <v-card-title>
                  <span class="headline">add</span>
                </v-card-title>
                <v-card-text>
                  <v-container grid-list-md>
                    <v-layout wrap>
                      <v-flex xs12>
                        <v-select
                          label="회사명"
                          required
                          v-model="selectedCompany"
                          :items ="company"
                          item-text="text"
                          item-value="org_company_id"
                          return-object
                          @click="callSchool()"
                        ></v-select>
                      </v-flex>
                      <v-flex xs12>
                        <v-select
                          label="학교명"
                          required
                          v-model="selectedSchool"
                          :items ="school"
                          item-text="text"
                          item-value="org_school_id"
                          return-object
                        ></v-select>
                      </v-flex>
                      <v-flex xs12 sm12>
                          <v-select
                            label="모집분야"
                            required
                            v-model="selectedBranch"
                            item-text="text"
                            item-value="employment_id"
                            :items ="branch"
                            return-object
                          ></v-select>
                        </v-flex>
                        <v-flex xs12 sm12>
                          <!-- 면접전형 -->
                          <v-select
                            label="면접전형"
                            required
                            v-model="selectedType"
                            :items ="type"
                            item-text="type"
                            item-value="id"
                            return-object
                            
                          ></v-select>
                        </v-flex>
                        
                        <v-flex xs12 sm12>
                          <v-text-field
                            v-model="selectedLevel"
                            label="차수"
                            required
                            disabled
                          ></v-text-field>
                          <!-- 차수  -->
                        </v-flex>
                        <v-flex xs12 sm4>
                          <v-select
                            label="년"
                            required
                            v-model="addDate.year"
                            :items ="time.year"
                          ></v-select>
                        </v-flex>
                        <v-flex xs12 sm4>
                          <v-select
                            label="월"
                            required
                            v-model="addDate.month"                  
                            :items ="time.month"
                          ></v-select>
                        </v-flex>
                        <v-flex xs12 sm4>
                        <v-select  
                          label="일"
                          required
                          v-model="addDate.day"                                    
                          :items ="time.day"
                        ></v-select>
                        </v-flex>
                        
                        <v-flex xs12 sm2>
                          <v-select
                            label="시"
                            required
                            v-model="addDate.startHour "                                                      
                            :items ="time.hour"
                          ></v-select>
                        </v-flex>
                        <v-flex xs12 sm2>
                          <v-select
                            label="분"
                            required
                            v-model="addDate.startMinute"                                                                        
                            :items ="time.minute"
                          ></v-select>
                        </v-flex>
                        <v-flex xs2 text-xs-center>-</v-flex>
                        <v-flex xs12 sm2> 
                          <v-select
                            label="시"
                            required
                            v-model="addDate.endHour"                                                      
                            :items ="time.hour"
                          ></v-select>
                        </v-flex>
                        <v-flex xs12 sm2>
                          <v-select
                            label="분"
                            required
                            v-model="addDate.endMinute"                                                                        
                            :items ="time.minute"
                          ></v-select>
                        </v-flex>
                    </v-layout>
                  </v-container>
                  <small>*indicates required field</small>
                </v-card-text>
                <v-card-actions>
                  <v-spacer></v-spacer>
                  <v-btn color="blue darken-1" flat @click.native="dialog = false">Close</v-btn>
                  <v-btn type ="submit" color="blue darken-1" flat @click="addItem()" >Save</v-btn>
                </v-card-actions>
              </v-card>
            </v-form>
          </v-dialog>
        </v-layout>
      </div>
        
      <!-- Saved schedule output -->
      <div
        :class="['ui-calendar-item', {'is-otherMonth': item.isPrevMonth || item.isNextMonth}]"
        slot-scope="item"
      >
        <div
          :class="['ui-calendar-item-date']">
          {{item.date.date}}
        </div>
        <div class="ui-calendar-item-name" v-for="(item, key) in item.data" :key="key">
          <!-- View Schedule Details -->
          <span @click="viewEvent(item)" >{{item.org_name}}</span>
          <!-- <span class="del" @click="deleteItem(item.date)">✖️</span>  -->
        </div>
      </div> 
    </Calendar>

    <!-- Schedule Details Modal -->
    <v-dialog v-model="schedule" persistent max-width="500px"> 
      <v-form ref="register" lazy-validation>
        <v-card>
          <v-card-title>
            <span class="headline">schedule</span>
          </v-card-title>
          <v-card-text>
            <v-container grid-list-md>
              <v-layout wrap>
                <v-flex xs2 text-xs-center>
                  회사({{pickupedData.interview_count}}차)
                </v-flex>
                <v-flex xs10>
                  <b-form-input 
                    type="text"
                    disabled
                    v-model="pickupedData.org_name"
                    >
                  </b-form-input>
                </v-flex>
                
                <v-flex xs2 text-xs-center v-show="this.$store.getters.classification == 'agent'">
                  학교
                </v-flex>
                <v-flex xs10 v-show="this.$store.getters.classification == 'agent'">
                  <b-form-input 
                    type="text"
                    disabled
                    v-model="pickupedData.school">
                  </b-form-input>
                </v-flex>

                <v-flex xs2 text-xs-center>
                  날짜
                </v-flex>
                <v-flex xs10>
                  <b-form-input 
                    type="text"
                    disabled
                    v-model="pickupedData.date">
                  </b-form-input>
                </v-flex> 

                <v-flex xs2 text-xs-center>
                  시간
                </v-flex>
                <v-flex xs4>
                  <b-form-input 
                    type="text"
                    disabled
                    v-model="pickupedData.interview_start_time">
                  </b-form-input>
                </v-flex>
                <v-flex xs2 text-xs-center>-</v-flex>
                <v-flex xs4>
                  <b-form-input 
                    type="text"
                    disabled
                    v-model="pickupedData.interview_end_time">
                  </b-form-input>
                </v-flex>

                <v-flex xs2 text-xs-center>
                  장소
                </v-flex>
                <v-flex xs10 v-if="pickupedData.interview_check_ox == 'o'">
                  <b-form-input 
                    type   ="text"
                    disabled                    
                    v-model="pickupedData.interview_place">
                  </b-form-input>
                </v-flex>
                <v-flex xs10 v-else>
                  <b-form-input 
                    type   ="text"
                    v-model="pickupedData.interview_place">
                  </b-form-input>
                </v-flex>

                <v-flex xs2 text-xs-center>
                  면접유형
                </v-flex>
                <v-flex xs10>
                  <b-form-input 
                    type   = "text"
                    disabled                    
                    v-model="pickupedData.content">
                  </b-form-input>
                </v-flex>

                <v-flex xs2 text-xs-center>
                  교수님<br> 승락여부
                </v-flex>
                <v-flex xs10>
                  <b-form-input 
                    type   = "text"
                    disabled                    
                    v-model="pickupedData.interview_check_ox">
                  </b-form-input>
                </v-flex>
              </v-layout>
            </v-container>
          </v-card-text>
          <v-card-actions>
            <v-spacer></v-spacer>  
            <v-btn color="blue darken-1" flat v-show="this.$store.getters.classification == 'professor' && !(pickupedData.interview_check_ox == 'o')" @click="agree(pickupedData), schedule=false">agree</v-btn>
            <v-btn color="blue darken-1" flat @click="deleteItem(pickupedData)" v-show="this.$store.getters.classification == 'agent'">delete</v-btn>            
            <v-btn color="blue darken-1" flat @click.native="schedule = false">Close</v-btn>                      
            <v-btn color="blue darken-1" flat @click="changeEventDialogOpen(pickupedData), schedule = false" v-show="this.$store.getters.classification == 'agent'">change</v-btn>
            <v-btn color="blue darken-1" flat @click="changeSchedule = true, schedule = false" v-show="this.$store.getters.classification == 'professor' && pickupedData.interview_check_ox == 'o'">change</v-btn>
          </v-card-actions>
        </v-card>
      </v-form>
    </v-dialog>
   </div>

   <div>
     <v-layout row>
     <v-dialog v-model="changeEventDialog" persistent max-width="500px" v-show="this.$store.getters.classification == 'agent'">
              <v-form ref="form" lazy-validation>
              <v-card>
                <v-card-title>
                  <span class="headline">change</span>
                </v-card-title>
                <v-card-text>
                  <v-container grid-list-md>
                    <v-layout wrap>
                      <v-flex xs12 sm12>
                      <v-text-field
                        v-model="changePickupedDate.org_name"
                        label="기업명"
                        required
                        disabled
                      ></v-text-field>
                      </v-flex>
                      <v-flex xs12 sm12>
                      <v-text-field
                        v-model="changePickupedDate.school"
                        label="학교명"
                        required
                        disabled
                      ></v-text-field>
                      </v-flex>
                      <v-flex xs12 sm12>
                      <v-text-field
                        v-model="changePickupedDate.branch"
                        label="모집분야"
                        required
                        disabled
                      ></v-text-field>
                      </v-flex>
                      <v-flex xs12 sm12>
                      <v-text-field
                        v-model="changePickupedDate.content"
                        label="면접전형"
                        required
                        disabled
                      ></v-text-field>
                      </v-flex>
                      <v-flex xs12 sm12>
                      <v-text-field
                        v-model="changePickupedDate.interview_count"
                        label="차수"
                        required
                        disabled
                      ></v-text-field>
                      </v-flex>
                      <v-flex xs12 sm12>
                      <v-text-field
                        v-model="changePickupedDate.interview_place"
                        label="장소"
                        required
                        disabled
                      ></v-text-field>
                      </v-flex>

                        <v-flex xs12 sm4>
                          <v-select
                            label="년"
                            required
                            v-model="changePickupedDate.year"
                            :items ="time.year"
                          ></v-select>
                        </v-flex>
                        <v-flex xs12 sm4>
                          <v-select
                            label="월"
                            required
                            v-model="changePickupedDate.month"                  
                            :items ="time.month"
                          ></v-select>
                        </v-flex>
                        <v-flex xs12 sm4>
                        <v-select  
                          label="일"
                          required
                          v-model="changePickupedDate.day"                                    
                          :items ="time.day"
                        ></v-select>
                        </v-flex>
                        
                        <v-flex xs12 sm2>
                          <v-select
                            label="시"
                            required
                            v-model="changePickupedDate.startHour"                                                      
                            :items ="time.hour"
                          ></v-select>
                        </v-flex>
                        <v-flex xs12 sm2>
                          <v-select
                            label="분"
                            required
                            v-model="changePickupedDate.startMinute"                                                                        
                            :items ="time.minute"
                          ></v-select>
                        </v-flex>
                        <v-flex xs2 text-xs-center>-</v-flex>
                        <v-flex xs12 sm2> 
                          <v-select
                            label="시"
                            required
                            v-model="changePickupedDate.endHour"                                                      
                            :items ="time.hour"
                          ></v-select>
                        </v-flex>
                        <v-flex xs12 sm2>
                          <v-select
                            label="분"
                            required
                            v-model="changePickupedDate.endMinute"                                                                        
                            :items ="time.minute"
                          ></v-select>
                        </v-flex>
                       
                    </v-layout>
                  </v-container>
                  <small>*indicates required field</small>
                </v-card-text>
                <v-card-actions>
                  <v-spacer></v-spacer>
                  <v-btn color="blue darken-1" flat @click.native="changeEventDialog = false">Close</v-btn>
                  <v-btn type ="submit" color="blue darken-1" flat @click="eventChange(changePickupedDate)" >Save</v-btn>
                </v-card-actions>
              </v-card>
            </v-form>
          </v-dialog>
        </v-layout>
   </div>

   <div>
     <!-- Schedule Details Modal -->
    <v-dialog v-model="changeSchedule" persistent max-width="500px"> 
      <v-form ref="register" lazy-validation>
        <v-card>
          <v-card-title>
            <span class="headline">change</span>
          </v-card-title>
          <v-card-text>
            <v-container grid-list-md>
              <v-layout wrap>
                <v-flex xs2 text-xs-center>
                  회사({{pickupedData.interview_count}}차)
                </v-flex>
                <v-flex xs10>
                  <b-form-input 
                    type="text"
                    disabled
                    v-model="pickupedData.org_name"
                    >
                  </b-form-input>
                </v-flex>
                
                <v-flex xs2 text-xs-center v-show="this.$store.getters.classification == 'agent'">
                  학교
                </v-flex>
                <v-flex xs10 v-show="this.$store.getters.classification == 'agent'">
                  <b-form-input 
                    type="text"
                    disabled
                    v-model="pickupedData.school">
                  </b-form-input>
                </v-flex>

                <v-flex xs2 text-xs-center>
                  날짜
                </v-flex>
                <v-flex xs10>
                  <b-form-input 
                    type="text"
                    disabled
                    v-model="pickupedData.date">
                  </b-form-input>
                </v-flex> 

                <v-flex xs2 text-xs-center>
                  시간
                </v-flex>
                <v-flex xs4>
                  <b-form-input 
                    type="text"
                    disabled
                    v-model="pickupedData.interview_start_time">
                  </b-form-input>
                </v-flex>
                <v-flex xs2 text-xs-center>-</v-flex>
                <v-flex xs4>
                  <b-form-input 
                    type="text"
                    disabled
                    v-model="pickupedData.interview_end_time">
                  </b-form-input>
                </v-flex>

                <v-flex xs2 text-xs-center>
                  장소
                </v-flex>
                
                <v-flex xs10>
                  <b-form-input 
                    type   ="text"
                    v-model="pickupedData.interview_place">
                  </b-form-input>
                </v-flex>

                <v-flex xs2 text-xs-center>
                  면접유형
                </v-flex>
                <v-flex xs10>
                  <b-form-input 
                    type   = "text"
                    disabled                    
                    v-model="pickupedData.content">
                  </b-form-input>
                </v-flex>

                <v-flex xs2 text-xs-center>
                  교수님<br> 승락여부
                </v-flex>
                <v-flex xs10>
                  <b-form-input 
                    type   = "text"
                    disabled                    
                    v-model="pickupedData.interview_check_ox">
                  </b-form-input>
                </v-flex>
              </v-layout>
            </v-container>
          </v-card-text>
          <v-card-actions>
            <v-spacer></v-spacer>  
            <v-btn color="blue darken-1" flat @click.native="changeSchedule = false">Close</v-btn>                      
            <v-btn color="blue darken-1" flat @click="professorPlaceSave(pickupedData), changeSchedule = false">save</v-btn>
          </v-card-actions>
        </v-card>
      </v-form>
    </v-dialog>
   </div>
</v-container>
</template>

<script>
import { required } from 'vuelidate/lib/validators'
/**
 * TODO:
 *      - [x] get Interview Date
 */
export default {
  props: [

      //에이전트
      "company", // 스케줄 등록 시 select 목록 회사

  ],
  
  data(){
    return {
      //임시값

      schedule          : false, //Schedule Details Modal
      dialog            : false, //Add Schedule modal     
      changeEventDialog : false, //change Schedule modal 
      changeSchedule    : false,
      mode              : 'month', //Current mode
       //Schedule to save
      today             : "",
      school            : [],
      branch            : [],
      type              : [],
      dateData          : [],
      selectedCompany   : "",
      selectedSchool    : "",
      selectedBranch    : "",
      selectedType      : "",
      selectedLevel     : "",

      //Selected schedule information
      pickupedData  : {
                        //일정 출력 시 필요한 정보
                        // content              : "서류전형＋면접"   => 면접 유형
                        // employment_id        : 1                 => 채용 id
                        // org_name             : "三成"            => 기업명
                        // org_name_kana        : "サンション"     
                        //  school              : "영진전문대"      => 학교명
                        // schedule_title       : null             => 스케줄 제목
                        // date                 : "2018-05-03"     => 날짜
                        // interview_start_time : "10:30:00"       => 시작하는 시간
                        // interview_end_time   : "12:30:00"       => 끝나는 시간
                        // interview_count      : 1                => 차수      
                        // interview_place      : "영진 정보관"     => 장소
                        // branch                : ""              => 모집분야
                        // 

                        //교수, 에이전트
                        // interview_check_ox   : "o"              => 교수님 수락여부
                    },   
        
        changePickupedDate : [],

      //에이전트 스케줄 등록시 필요한 정보
      data          : {
                        selectedCompany    : "",  //선택 회사명
                        selectedSchool     : "",  //선택 학교명
                    },
                    

      addDate      : {
                        year               : "",  //시작날짜
                        month              : "",
                        day                : "",
                        startHour          : "",  //시작시간
                        startMinute        : "",
                        endHour            : "",  //종료시간
                        endMinute          : "",
                        selectedType       : "",  //선택 면접전형
                        selectedLevel      : "",   //선택 면접차수
                        branch             : ""
                    },

      //스케줄 등록 시 날짜를 select로 선택 할 수 있게 하기 위한 변수
      time          : {
                        year               : [], 
                        month              : [],
                        day                : [],
                        hour               : [],
                        minute             : []
                    },

       
    }
  },
  watch: {
    //기업 선택 시 기업에 물린 학교를 불러온다.
    selectedCompany(){
      this.selectedSchool = "";
      this.data.selectedCompany = this.selectedCompany.org_company_id;
      //FIXME: 선택된 기업에 물린 학교 리스트 { org_school_id:'yjc01', text:'영진전문대' }
      let reqHttpAddr = "/calendarFundamental_interview_college_list"; 
      let sendData    = { 
                          id          : this.$store.getters.identification,    //userID
                          companyid   : this.selectedCompany.org_company_id
                        };   
      
      this.axios.post(reqHttpAddr, sendData)
      .then((res) => {
          this.school = res.data;
          
      }).catch( (err) => {
          console.log(err.message);
      });

    },
    //학교 선택 시 모집분야를 불러온다.
    selectedSchool(){
      let data = "";
      this.data.selectedSchool = this.selectedSchool.org_school_id;
      this.branch = [];
      let reqHttpAddr = "/calendarFundamental_interview_employment_id"; 
      let sendData    = { 
                          id          : this.$store.getters.identification,    //userID
                          company_id  : this.selectedCompany.org_company_id,
                          school_id   : this.selectedSchool.org_school_id
                        };   
      
      this.axios.post(reqHttpAddr, sendData)
      .then((res) => {

          for( let i = 0 ; i < res.data.length ; i++ ){
            for( let j = 0 ; j < res.data[i].branch.length ; j++ ){
              if(j == 0){
                data = res.data[i].branch[j].content;
              }else{
                data += ("+" +  res.data[i].branch[j].content);
              }
              
            }
            let employment_id = res.data[i].employment_id;
            
            // console.log(res.data[0].branch[branchList].content);
            //FIXME:  채용 공고 id 
            this.branch.push({ text: data, employment_id:employment_id } );
          }
         
      }).catch( (err) => {
          console.log(err.message);
      });

    },
    //모집분야 선택 시 면접전형을 불러온다.
    selectedBranch(){
      this.addDate.branch = this.selectedBranch.employment_id;
      
      let reqHttpAddr = "/calendarFundamental_interview_content_list"; 
      let sendData    = { 
                          id          : this.$store.getters.identification,    //userID
                          company_id  : this.selectedCompany.org_company_id,
                          school_id   : this.selectedSchool.org_school_id,
                          branch      : this.selectedBranch.employment_id
                        };   
      
      this.axios.post(reqHttpAddr, sendData)
      .then((res) => {
        this.type = res.data;
          //type : [ "면접", "spi"], => 면접전형
      }).catch( (err) => {
          console.log(err.message);
      });
    },
    //면접전형 선택 시 차수를 받아온다.
    selectedType(){
      this.addDate.selectedType = this.selectedType.id;
      
      let reqHttpAddr = "/calendarFundamental_interview_count"; 
      let sendData    = { 
                          id          : this.$store.getters.identification,    //userID
                          company_id  : this.selectedCompany.org_company_id,
                          school_id   : this.selectedSchool.org_school_id,
                          branch      : this.selectedBranch.employment_id, 
                        };   
      this.axios.post(reqHttpAddr, sendData)
      .then((res) => {
        
          if(res.data == ''){
            this.selectedLevel = '1';
            this.addDate.selectedLevel = this.selectedLevel;
          }else{
            this.selectedLevel = res.data;
            this.addDate.selectedLevel = this.selectedLevel;
          }
          
      }).catch( (err) => {
          console.log(err.message);
      });
    }
    
  },
  validations : {
    addDate : {
      required,
      $each : {
        year               : {  required  },  
        month              : {  required  },
        day                : {  required  },
        startHour          : {  required  }, 
        startMinute        : {  required  },
        endHour            : {  required  },  
        endMinute          : {  required  }
      }
    }
  },

  created(){
    //오늘 날짜
    this.today    =  this.$moment(new Date()).format('YYYY-MM-DD');
    this.callDate();
    this.createSelectDate();
  },
  
  
  methods : {
    //Month turnover
    renderHeader : function({ prev, next, selectedDate }) {
      const h = this.$createElement;

      const prevButton = h('div', {
        on: {
          click: prev
        }
      }, ['prev'])

      const nextButton = h('div', {
        on: {
          click: next         
        }
      }, ['next'])

      return h('div', [prevButton, selectedDate, nextButton])
    },

    callDate : function() {
      let reqHttpAddr = "/Professor_calender_info"; 
      let sendData    = { 
                          professorId :this.$store.getters.identification //교수ID
                        };     
      
      this.axios.post(reqHttpAddr, sendData)
      .then((res) => {
        this.dateData = res.data;
        //채용정보id 스케줄제목, 면접차수, 면접장소, 날짜, 시작시간, 끝시간, 면접종류, 면접내용, 교수허락여부
        //{title:"A"(회사명), date:"2018-04-28", space, startTime:"03:28",  endTime, type, contents, agrre},
          
      }).catch( (err) => {
          console.log(err.message);
      });
    },

    //View Schedule
    viewEvent : function (p){
      //p = dateData
      this.pickupedData = p;
      this.schedule     = true;
      
    },

    //delete schedule (에이전트)
    deleteItem : function(info) {
      
      let reqHttpAddr = "/calendarFundamental_interview_schedule_delete"; 
      let sendData    = { 
                          id                : this.$store.getters.identification,    //userID
                          interview_id      : info.interview_id,                     //인터뷰 ID   
                        };     
      
      this.axios.post(reqHttpAddr, sendData)
      .then((res) => {
        
      }).catch( (err) => {
          console.log(err.message);
      });
    },
    
    //스케줄 등록 
    addItem : function(){
   
      
        if (this.$refs.form.validate()) {
            let reqHttpAddr = "/calendarFundamental_register"; 
            let sendData    = { 
                                id          : 'root',//this.$store.getters.identification,    //userID
                                data        : this.data,                             //추가할 스케줄 정보 (기업명, 학교명, 면접전형, 차수),
                                addDate     : this.addDate                           //추가할 스케줄 날짜 (날짜, 시작시간, 끝시간) : 배열
                              };   
            
            this.axios.post(reqHttpAddr, sendData)
            .then((res) => {
                console.log(res.data);
            }).catch( (err) => {
                console.log(err.message);
            });
        }
    },

    
    //스케줄 수락(교수)
    agree : function(info){
      let reqHttpAddr = "/calendarFundamental_interview_schedule_agree"; 
      let sendData    = { 
                          id          : this.$store.getters.identification,    //userID
                          interview_id: info.interview_id,                     //interview_id
                          agree       : "o",
                          interview_place : info.interview_place               //장소
                        };     
      
      this.axios.post(reqHttpAddr, sendData)
      .then((res) => {
         this.callDate();
      }).catch( (err) => {
          console.log(err.message);
      });
    },
    //장소수정 (교수)
    professorPlaceSave : function(info){
      let reqHttpAddr = "/calendarFundamental_interview_place_change"; 
      let sendData    = { 
                          id              : this.$store.getters.identification,    //userID
                          interview_id    : info.interview_id,                     //interview_id
                          interview_place : info.interview_place               //장소
                        };     
      
      this.axios.post(reqHttpAddr, sendData)
      .then((res) => {
        
      }).catch( (err) => {
          console.log(err.message);
      });
   
      
    },

    changeEventDialogOpen : function(date){
      let year, month,  day, startHour, startMinute, endHour, endMinute,branch = "";
 
      let data = date.date.split("-");
      year = data[0];
      month = data[1];
      day = data[2];

      data = date.interview_start_time.split(":");
      startHour = data[0];
      startMinute = data[1];

      data = date.interview_end_time.split(":");
      endHour = data[0];
      endMinute = data[1];
      
      for( let i = 0 ; i < date.branch.length ; i++ ){
        if(i == 0){
          branch = date.branch[i].content;
        }else{
          branch += ("+" +  date.branch[i].content);
        }
        // console.log(res.data[0].branch[branchList].content);
        //FIXME:  채용 공고 id 
      }

      this.changePickupedDate={interview_id:date.interview_id,employment_id: date.employment_id, branch: branch, content: date.content, school : date.school, interview_place: date.interview_place,org_name:date.org_name, employment_id: date.employment_id,interview_check_ox:date.interview_check_ox,interview_count: date.interview_count, year: year, month: month,  day: day, startHour: startHour, startMinute: startMinute, endHour: endHour, endMinute: endMinute };      
      this.changeEventDialog = true;

      // changePickupedDate
    },

    //FIXME: 스케줄 수정
    eventChange : function(info){
      let reqHttpAddr = "/calendarFundamental_schedule_change"; 
      let sendData    = { 
                          id          : this.$store.getters.identification,    //userID
                          data        : info
                        };     


      this.axios.post(reqHttpAddr, sendData)
      .then((res) => {
          
      }).catch( (err) => {
          console.log(err.message);
      });
    },
    createSelectDate : function(){
        //년, 월, 일, 시, 분
        let year = new Date().getFullYear();
        console.log(year);
        for( let a = year ; a < year + 2 ; a++  ){
          this.time.year  .push( a );
        } 
        for( let month = 1 ; month < 13 ; month++ ){
          this.time.month .push( month );
        }
        for( let day = 1 ; day < 32 ; day++ ){
          this.time.day .push( day );
        }
        for( let hour = 1 ; hour < 25 ; hour++ ){
          this.time.hour .push( hour );
        }
        for( let minute = 0 ; minute < 60 ; minute++ ){
          this.time.minute .push( minute );
        }
        
        // time          : {
        //                 year               : [], 
        //                 month              : [],
        //                 day                : [],
        //                 hour               : [],
        //                 minute             : []
        //             }
    }
  },
}
</script>